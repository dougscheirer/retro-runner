require 'rails_helper'
require 'database_cleaner'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe IssuesController, :type => :controller do

  let(:valid_attributes) {
    {
      :issue_type => 'Good',
      :retro_id => 1,
      :description => 'Nice job',
      :creator_id => 1
    }
  }

  let(:invalid_attributes) {
    { :pizza => "pepperoni" }
  }

  let(:valid_session) { { 'user_id' => 1 } }

  # This should return the minimal set of attributes required to create a valid
  # Issues. As you add validations to Issues, be sure to
  # adjust the attributes here as well.
  before :each do
    @project = FactoryGirl.create(:project)
    @project.save
    @retro = FactoryGirl.create(:retro)
    @retro.save
    @user = FactoryGirl.create(:user)
    @user.save
  end

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # IssuesController. Be sure to keep this updated too.

  context 'login not required' do
    describe "GET index" do
      it "assigns types of issues" do
        issue = Issue.create! valid_attributes
        get :index, { :retro_id => 1 }
        expect(assigns(:good_issues)).to eq([issue])
      end
    end

    describe "GET show" do
      it "assigns the requested issue as @issue" do
        issue = Issue.create! valid_attributes
        get :show, {:id => issue.to_param}, valid_session
        expect(assigns(:issue)).to eq(issue)
      end
    end
  end

  context 'login is required' do

    describe "GET new" do
      it "assigns a new issue as @issue" do
        get :new, { :retro_id => 1 }, valid_session
        expect(assigns(:issue)).to be_a_new(Issue)
      end
    end

    describe "GET edit" do
      it "assigns the requested issue as @issue" do
        issue = Issue.create! valid_attributes
        get :edit, {:id => issue.to_param}, valid_session
        expect(assigns(:issue)).to eq(issue)
      end
    end

    describe "POST create" do
      describe "with valid params" do
        it "creates a new Issue" do
          expect {
            post :create, {:issue => valid_attributes, :retro_id => 1}, valid_session
          }.to change(Issue, :count).by(1)
        end

        it "assigns a newly created issue as @issue" do
          post :create, {:issue => valid_attributes, :retro_id => 1}, valid_session
          expect(assigns(:issue)).to be_a(Issue)
          expect(assigns(:issue)).to be_persisted
        end

        it "redirects to the created issue" do
          post :create, {:issue => valid_attributes, :retro_id => 1}, valid_session
          expect(response).to redirect_to(Retro.find(1))
        end
      end

      describe "with invalid params" do
        it "assigns a newly created but unsaved issue as @issue" do
          post :create, {:issue => invalid_attributes, :retro_id => 1}, valid_session
          expect(assigns(:issue)).to be_a_new(Issue)
        end

        it "re-renders the 'new' template" do
          post :create, {:issue => invalid_attributes, :retro_id => 1}, valid_session
          expect(response).to render_template("new")
        end
      end
    end

    describe "PUT update" do
      describe "with valid params" do
        let(:new_attributes) {
          {
            :issue_type => "Bad",
            :retro_id => 1,
            :description => "Terrible job",
            :creator_id => 1
          }
        }

        it "updates the requested issue" do
          issue = Issue.create! valid_attributes
          put :update, {:id => issue.to_param, :issue => new_attributes, :retro_id => 1}, valid_session
          issue.reload
          new_attributes.each { |key, value|
            expect(issue[key]).to eq(value)
          }
        end

        it "assigns the requested issue as @issue" do
          issue = Issue.create! valid_attributes
          put :update, {:id => issue.to_param, :issue => valid_attributes, :retro_id => 1}, valid_session
          expect(assigns(:issue)).to eq(issue)
        end

        it "redirects to the issue" do
          issue = Issue.create! valid_attributes
          put :update, {:id => issue.to_param, :issue => valid_attributes, :retro_id => 1}, valid_session
          expect(response).to redirect_to(Retro.find(1))
        end
      end

      describe "with invalid params" do
        it "assigns the issue as @issue" do
          issue = Issue.create! valid_attributes
          put :update, {:id => issue.to_param, :issue => invalid_attributes, :retro_id => 1}, valid_session
          expect(assigns(:issue)).to eq(issue)
        end

        it "re-renders the 'edit' template" do
          issue = Issue.create! valid_attributes
          put :update, {:id => issue.to_param, :issue => invalid_attributes, :retro_id => 1}, valid_session
          expect(response).to render_template("edit")
        end
      end
    end

    describe "DELETE destroy" do
      it "destroys the requested issue" do
        issue = Issue.create! valid_attributes
        expect {
          delete :destroy, {:id => issue.to_param, :retro_id => 1}, valid_session
        }.to change(Issue, :count).by(-1)
      end

      it "redirects to the issues list" do
        issue = Issue.create! valid_attributes
        delete :destroy, {:id => issue.to_param, :retro_id => 1}, valid_session
        expect(response).to redirect_to(Retro.find(1))
      end
    end
  end
end
